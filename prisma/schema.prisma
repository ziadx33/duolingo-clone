// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider = "zod-prisma"
    output   = "./zod" // (default) the directory where generated zod schemas will be saved

    relationModel = true // (default) Create and export both plain and related models.
    // relationModel         = "default" // Do not export model without relations.
    // relationModel         = false // Do not generate related model

    modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
    // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

    modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

    // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
    useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

    imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

    // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
    prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
    // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String    @id @default(cuid())
    name             String?
    email            String?   @unique
    emailVerified    DateTime?
    image            String?   @default("https://utfs.io/f/6213c0cc-9851-460a-a19d-7870de89bbee-pjqibl.jpg")
    password         String
    created_at       DateTime  @default(now())
    currentSubject   Subject   @relation(fields: [currentSubjectId], references: [id])
    currentSubjectId String    @default("")

    streak         Int      @default(0)
    highest_streak Int      @default(0)
    last_streak    DateTime @default(now())

    gem Int @default(500)

    hearts             Int      @default(5)
    lastHeartIncrement DateTime @default(now())

    totalXp                Int      @default(0)
    current_xp             Int      @default(0)
    last_xp_increment      DateTime @default(now())
    current_league_xp      Int      @default(0)
    last_current_league_xp DateTime @default(now())

    completed_quests_ids String[] @default([])

    accounts Account[]
    sessions Session[]

    freeze_streak Boolean @default(false)

    double_or_nothing Boolean @default(false)

    current_league           League?  @relation(fields: [current_league_id], references: [id])
    current_league_id        String?  @default("1")
    current_next_league_days Int      @default(7)
    current_league_started   DateTime @default(now())

    completedUnitsIds    String[] @default([])
    completedPracticeIds String[] @default([])
    completedLessonIds   String[] @default([])
}

model League {
    id       String @id @default(uuid())
    img_src  String
    name     String
    top_won  Int
    top_lose Int
    User     User[]
}

model Quest {
    id    String @id
    costs Int
    price Int
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model Subject {
    id    String @id @default(uuid())
    name  String
    code  String
    units Unit[]
    User  User[]
}

model Unit {
    id          String     @id @default(uuid())
    description String
    Subject     Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
    subjectId   String
    practices   Practice[]
}

model Practice {
    id      String   @id @default(uuid())
    title   String
    Unit    Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
    unitId  String
    lessons Lesson[]
}

model Lesson {
    id         String   @id @default(uuid())
    xp         Int
    Practice   Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
    practiceId String

    questions QuestionType[]
}

enum QUESTIONTYPE {
    HEARING
    CHOOSE
    WRITE
}

model QuestionType {
    id       String  @id @default(uuid())
    Lesson   Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    lessonId String?

    type QUESTIONTYPE

    hearingQuestion HearingQuestion? @relation(fields: [hearingId], references: [id], onDelete: Cascade)
    hearingId       String?

    choosingQuestion ChoosingQuestion? @relation(fields: [choosingId], references: [id], onDelete: Cascade)
    choosingId       String?

    WriteQuestion WriteQuestion? @relation(fields: [writeId], references: [id], onDelete: Cascade)
    writeId       String?
}

model HearingQuestion {
    id        String         @id @default(uuid())
    questions QuestionType[]

    sentenceSrc        String
    suggestedSentences String[]
    correctSentence    String
}

model ChoosingQuestion {
    id        String         @id @default(uuid())
    questions QuestionType[]

    correctSentence             String
    correctChoosen              String
    suggestedSentences          String[]
    suggestedSentencesImgSrcs   String[]
    suggestedSentencesSoundSrcs String[]
}

model WriteQuestion {
    id        String         @id @default(uuid())
    questions QuestionType[]

    suggestedSentences   String[]
    correctSentence      WriteQuestionAnswer @relation(fields: [writeQuestionAnswerId], references: [id], onDelete: Cascade)
    correctSentenceVoice String?

    writeQuestionAnswerId String
}

model WriteQuestionAnswer {
    id              String          @id @default(uuid())
    WriteQuestion   WriteQuestion[]
    correctSentence String[]
    helpers         String[]
}

enum SHOP_ITEM_TYPE {
    MAXIMIZE_HEARTS
    STREAK_FREEZE
    DOUBLE_GEMS
}

model ShopItem {
    id          String         @id @default(uuid())
    name        String
    description String
    imgSrc      String
    costs       Int
    type        SHOP_ITEM_TYPE
}

enum ACHIEVEMENT_TYPE {
    STREAK
    XP
}

model Achievement {
    id     String           @id @default(uuid())
    name   String
    imgSrc String
    type   ACHIEVEMENT_TYPE
    levels Int              @default(10)
    max    Int
}
